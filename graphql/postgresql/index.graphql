type Category {
  created_at: DateTime
  id: ID!
  name: String
  username: String
}

type Item {
  category_id: ID
  created_at: DateTime
  id: ID!
  image: String
  name: String
  note: String
  username: String
}

"""
NOTE: items: unsupported type ARRAY, field omitted
NOTE: categories: unsupported type ARRAY, field omitted
"""
type Shopping_list {
  created_at: DateTime
  id: ID!
  name: String
  username: String
}

type Query {
  getCategoryList: [Category]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "category"
      configuration: "postgresql_config"
    )
  """
  This query is an example of how to simply paginate your responses.
  """
  getPaginatedCategoryList(first: Int!, after: Int!): [Category]
    @dbquery(
      type: "postgresql"
      query: """
      select * from "public"."category" limit $1 offset $2
      """
      configuration: "postgresql_config"
    )
  """
  In this example, a single query parameter is passed. If the request to the DB will
  return at most one value you can remove the square brackets from the result.
  """
  getCategoryById(id: ID!): [Category]
    @dbquery(
      type: "postgresql"
      query: """
      select * from "public"."category" where "id" = $1
      """
      configuration: "postgresql_config"
    )
  """
  In this example, two query parameters are passed. If the request to the DB will
  return at most one value you can remove the square brackets from the result.
  """
  getCategoryByIdAndCreated_at(id: ID!, created_at: DateTime!): [Category]
    @dbquery(
      type: "postgresql"
      query: """
      select * from "public"."category" where "id" = $1 and "created_at" = $2
      """
      configuration: "postgresql_config"
    )
  getItemList: [Item]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "item"
      configuration: "postgresql_config"
    )
  getShopping_listList: [Shopping_list]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "shopping_list"
      configuration: "postgresql_config"
    )
}

type Mutation {
  """
  In this mutation example you can see how to do a mutation to insert data in the database.
  """
  insertItem(
    image: String!
    created_at: DateTime!
    note: String!
    name: String!
    category_id: ID!
    username: String!
  ): Item
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "item"
      dml: INSERT
      configuration: "postgresql_config"
    )
  """
  In this mutation example you can see how to do a mutation to delete data from the database.
  """
  deleteItem(
    image: String!
    created_at: DateTime!
    note: String!
    id: ID!
    name: String!
    category_id: ID!
    username: String!
  ): Item
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "item"
      dml: DELETE
      configuration: "postgresql_config"
    )
}
